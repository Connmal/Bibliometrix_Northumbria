---
title: "Data Cleaning"
author: 
  - name: "Thomas Pollet and Connor Malcolm"
    affiliations: 
     - name: "Northumbria University"
date: "2022-01-30"
date-modified: "`r format(Sys.time(), '%Y %B, %d')`"
title-block-banner: true
abstract: "Data Cleaning readying for analyses"
---

```{r}
#| echo: false
#| output: false
library(tidyverse)
library(yarrr)
library(wordcloud)
library(wordcloud2)
library(bibliometrix)
library(tidyverse)
library(igraph)
library(tidygraph)
library(ggraph)
library(EGAnet)
library(papaja)
library(janitor)
library(gtools)
library(data.table)
library(readr)
library(ggplot2)
library(HiveR)
library(RBioFabric) #Installation: install.packages("remotes")
                    #remotes::install_github("wjrl/RBioFabric")
```

```{r}
#| echo: false
#| output: false

scopus1000df <- convert2df(file = "scopus2000alloa.bib" , dbsource = "scopus", format = "bibtex")
scopusRESTdf <- convert2df(file = "scopusall30.bib" , dbsource = "scopus", format = "bibtex")
scopus_all_oa<- merge(scopusRESTdf, scopus1000df, all = TRUE) #Scopus has a 2000 limit for BibTex files so All Open Access needed to be downloaded into two .bib files and then merged to one


```

```{r}
#| echo: false
#| output: false

file <- "scopusGreen.bib"

scopus_green <- convert2df(file = file , dbsource = "scopus", format = "bibtex")

```

```{r}
#| echo: false
#| output: false

file <- "scopusGREENFINALOA.bib"

scopus_green_final <- convert2df(file = file , dbsource = "scopus", format = "bibtex")
```

```{r}
#| echo: false
#| output: false

file <- "scopusGREENACCEPTEDOA.bib"

scopus_green_accepted <- convert2df(file = file , dbsource = "scopus", format = "bibtex")
```

```{r}
#| echo: false
#| output: false

file <- "scopusNOTGREEN.bib"

scopus_not_green <- convert2df(file = file , dbsource = "scopus", format = "bibtex")
```

```{r}
#| echo: false
#| output: false
 
wos1000df <- convert2df(file = "wosALLOA1000.bib" , dbsource = "wos", format = "bibtex")
wosRESTdf <- convert2df(file = "wosALLrest.bib" , dbsource = "wos", format = "bibtex")
wos_all_oa<- merge(wosRESTdf, wos1000df, all = TRUE)#Web of science has a 1000 limit for BibTex files so All Open Access needed to be downloaded into two .bib files and then merged to one
```

```{r}
#| echo: false
#| output: false

file <- "wosAllGreen.bib"

wos_green <- convert2df(file = file , dbsource = "wos", format = "bibtex")
```

```{r}
#| echo: false
#| output: false

file <- "wosNOTGREEN.bib"

wos_not_green <- convert2df(file = file , dbsource = "wos", format = "bibtex")
```

```{r}
#| echo: false
#| output: false

file <- "wosFinal.bib"

wos_green_final <- convert2df(file = file , dbsource = "wos", format = "bibtex")
```

```{r}
#| echo: false
#| output: false

wos1000Accepteddf <- convert2df(file = "wosAcceptedOA1000.bib" , dbsource = "wos", format = "bibtex")
wosRESTAccepteddf <- convert2df(file = "wosAcceptedrest.bib" , dbsource = "wos", format = "bibtex")
wos_green_accepted<- merge(wosRESTAccepteddf, wos1000Accepteddf, all = TRUE)#Web of science has a 1000 limit for BibTex files so All Open Access needed to be downloaded into two .bib files and then merged to one
```

# Data Cleaning

## Scopus merge with Web of Science

Merging Scopus and Web of Science data.

**All Open Access**

```{r}
common_col_all_oa_names <- intersect(names(scopus_all_oa), names(wos_all_oa)) #Find common column names
scopus_wos_all_oa <- merge(scopus_all_oa, wos_all_oa, by=common_col_all_oa_names, all.x=TRUE) # Merge data by common column names to check if scopus missed any publications wos has.
```

**Green**

```{r}
common_col_green_names <- intersect(names(scopus_green), names(wos_green)) #Find common column names
scopus_wos_green <- merge(scopus_green, wos_green, by=common_col_green_names, all.x=TRUE) # Merge data by common column names to check if scopus missed any publications wos has.
```

**Green Final**

```{r}
common_col_green_final_names <- intersect(names(scopus_green_final), names(wos_green_final)) #Find common column names
scopus_wos_green_final <- merge(scopus_green_final, wos_green_final, by=common_col_green_final_names, all.x=TRUE) # Merge data by common column names to check if scopus missed any publications wos has.
```

**Green Accepted**

```{r}
common_col_green_accepted_names <- intersect(names(scopus_green_accepted), names(wos_green_accepted)) #Find common column names
scopus_wos_green_accepted <- merge(scopus_green_accepted, wos_green_accepted, by=common_col_green_accepted_names, all.x=TRUE) # Merge data by common column names to check if scopus missed any publications wos has.
```

**Not Green**

```{r}
common_col_not_green_names <- intersect(names(scopus_not_green), names(wos_not_green)) #Find common column names
scopus_wos_not_green <- merge(scopus_not_green, wos_not_green, by=common_col_not_green_names, all.x=TRUE) # Merge data by common column names to check if scopus missed any publications wos has.
```

### Just Corresponding authors

Cleaning to just corresponding authors

```{r}
all_oa_corr <- scopus_wos_all_oa %>% dplyr::filter(grepl("@northumbria",RP, ignore.case = TRUE))
all_oa_single_authors<- all_oa_corr %>% 
    mutate(AU = strsplit(as.character(AU), ";")) %>%  
    unnest(AU) #Individual authors

green_corr <- scopus_wos_green %>% dplyr::filter(grepl("@northumbria",RP, ignore.case = TRUE))
green_single_authors<- green_corr %>% 
    mutate(AU = strsplit(as.character(AU), ";")) %>%  
    unnest(AU) #Individual authors

green_final_corr <- scopus_wos_green_final %>% dplyr::filter(grepl("@northumbria",RP, ignore.case = TRUE))
green_final_single_authors<- green_final_corr %>% 
    mutate(AU = strsplit(as.character(AU), ";")) %>%  
    unnest(AU) #Individual authors

green_accepted_corr <- scopus_wos_green_accepted %>% dplyr::filter(grepl("@northumbria",RP, ignore.case = TRUE))
green_accepted_single_authors<- green_accepted_corr %>% 
    mutate(AU = strsplit(as.character(AU), ";")) %>%  
    unnest(AU) #Individual authors

not_green_corr <- scopus_wos_not_green %>% dplyr::filter(grepl("@northumbria",RP, ignore.case = TRUE))
not_green_single_authors<- not_green_corr %>% 
    mutate(AU = strsplit(as.character(AU), ";")) %>%  
    unnest(AU) #Individual authors
```

```{r}
all_oa_single_authors$RP <- sub(';.*', "" , as.character(all_oa_single_authors$RP))
all_oa_single_authors$RP <- gsub(',',"", as.character(all_oa_single_authors$RP))
all_oa_single_authors$RP <- gsub('\\.',"", as.character(all_oa_single_authors$RP))
#Removing problem characters fo filtering to just corresponding authors.
rp_single_author_all_oa <- subset(all_oa_single_authors, AU == RP)

green_single_authors$RP <- sub(';.*', "" , as.character(green_single_authors$RP))
green_single_authors$RP <- gsub(',',"", as.character(green_single_authors$RP))
green_single_authors$RP <- gsub('\\.',"", as.character(green_single_authors$RP))
#Removing problem characters fo filtering to just corresponding authors.
rp_single_author_green <- subset(green_single_authors, AU == RP)

green_final_single_authors$RP <- sub(';.*', "" , as.character(green_final_single_authors$RP))
green_final_single_authors$RP <- gsub(',',"", as.character(green_final_single_authors$RP))
green_final_single_authors$RP <- gsub('\\.',"", as.character(green_final_single_authors$RP))
#Removing problem characters fo filtering to just corresponding authors.
rp_single_author_green_final <- subset(green_final_single_authors, AU == RP)

green_accepted_single_authors$RP <- sub(';.*', "" , as.character(green_accepted_single_authors$RP))
green_accepted_single_authors$RP <- gsub(',',"", as.character(green_accepted_single_authors$RP))
green_accepted_single_authors$RP <- gsub('\\.',"", as.character(green_accepted_single_authors$RP))
#Removing problem characters fo filtering to just corresponding authors.
rp_single_author_green_accepted <- subset(green_accepted_single_authors, AU == RP)

not_green_single_authors$RP <- sub(';.*', "" , as.character(not_green_single_authors$RP))
not_green_single_authors$RP <- gsub(',',"", as.character(not_green_single_authors$RP))
not_green_single_authors$RP <- gsub('\\.',"", as.character(not_green_single_authors$RP))
#Removing problem characters fo filtering to just corresponding authors.
rp_single_author_not_green <- subset(not_green_single_authors, AU == RP)
```

Check for duplicates!

```{r}
duplicates_green_green<-inner_join(scopus_wos_not_green, scopus_wos_green_final, scopus_wos_green_accepted, by='DI')

duplicates_not_green_green_final<-inner_join(scopus_wos_not_green, scopus_wos_green_final, scopus_wos_green, by='DI')

duplicates_not_green_green_acccepted<-inner_join(scopus_wos_not_green, scopus_wos_green_accepted, scopus_wos_green, by='DI')

duplicates_green_final_green_acccepted<-inner_join(scopus_green_final, scopus_wos_green_accepted, scopus_wos_green, by='DI')
```
