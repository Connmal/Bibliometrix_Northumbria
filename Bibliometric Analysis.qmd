---
title: "Bibliometric Analysis"
author: 
  - name: "Thomas Pollet and Connor Malcolm"
    affiliations: 
     - name: "Northumbria University"
date: "2022-01-30"
date-modified: "`r format(Sys.time(), '%Y %B, %d')`"
title-block-banner: true
abstract: "Analysis of Bilbiograpgic data based on the Bibliometrix package."
---

```{r}
#| echo: false
#| output: false
library(tidyverse)
library(yarrr)
library(wordcloud)
library(wordcloud2)
library(bibliometrix)
library(tidyverse)
library(igraph)
library(tidygraph)
library(ggraph)
library(EGAnet)
library(papaja)
library(janitor)
library(gtools)
library(data.table)
library(readr)
library(ggplot2)
library(HiveR)
```

```{r}
#| echo: false
#| output: false

scopus1000df <- convert2df(file = "scopus2000alloa.bib" , dbsource = "scopus", format = "bibtex")
scopusRESTdf <- convert2df(file = "scopusall30.bib" , dbsource = "scopus", format = "bibtex")
scopus_all_oa<- merge(scopusRESTdf, scopus1000df, all = TRUE) #Scopus has a 2000 limit for BibTex files so All Open Access needed to be downloaded into two .bib files and then merged to one


```

```{r}
#| echo: false
#| output: false

file <- "scopusGreen.bib"

scopus_green <- convert2df(file = file , dbsource = "scopus", format = "bibtex")

```

```{r}
#| echo: false
#| output: false

file <- "scopusGREENFINALOA.bib"

scopus_green_final <- convert2df(file = file , dbsource = "scopus", format = "bibtex")
```

```{r}
#| echo: false
#| output: false

file <- "scopusGREENACCEPTEDOA.bib"

scopus_green_accepted <- convert2df(file = file , dbsource = "scopus", format = "bibtex")
```

```{r}
#| echo: false
#| output: false

file <- "scopusNOTGREEN.bib"

scopus_not_green <- convert2df(file = file , dbsource = "scopus", format = "bibtex")
```

```{r}
#| echo: false
#| output: false
 
wos1000df <- convert2df(file = "wosALLOA1000.bib" , dbsource = "wos", format = "bibtex")
wosRESTdf <- convert2df(file = "wosALLrest.bib" , dbsource = "wos", format = "bibtex")
wos_all_oa<- merge(wosRESTdf, wos1000df, all = TRUE)#Web of science has a 1000 limit for BibTex files so All Open Access needed to be downloaded into two .bib files and then merged to one
```

```{r}
#| echo: false
#| output: false

file <- "wosAllGreen.bib"

wos_green <- convert2df(file = file , dbsource = "wos", format = "bibtex")
```

```{r}
#| echo: false
#| output: false

file <- "wosNOTGREEN.bib"

wos_not_green <- convert2df(file = file , dbsource = "wos", format = "bibtex")
```

```{r}
#| echo: false
#| output: false

file <- "wosFinal.bib"

wos_green_final <- convert2df(file = file , dbsource = "wos", format = "bibtex")
```

```{r}
#| echo: false
#| output: false

wos1000Accepteddf <- convert2df(file = "wosAcceptedOA1000.bib" , dbsource = "wos", format = "bibtex")
wosRESTAccepteddf <- convert2df(file = "wosAcceptedrest.bib" , dbsource = "wos", format = "bibtex")
wos_green_accepted<- merge(wosRESTAccepteddf, wos1000Accepteddf, all = TRUE)#Web of science has a 1000 limit for BibTex files so All Open Access needed to be downloaded into two .bib files and then merged to one
```

```{r}
#| echo: false
#| output: false
common_col_all_oa_names <- intersect(names(scopus_all_oa), names(wos_all_oa)) #Find common column names
scopus_wos_all_oa <- merge(scopus_all_oa, wos_all_oa, by=common_col_all_oa_names, all.x=TRUE) # Merge data by common column names to check if scopus missed any publications wos has.
```

```{r}
#| echo: false
#| output: false
common_col_green_names <- intersect(names(scopus_green), names(wos_green)) #Find common column names
scopus_wos_green <- merge(scopus_green, wos_green, by=common_col_green_names, all.x=TRUE) # Merge data by common column names to check if scopus missed any publications wos has.
```

```{r}
#| echo: false
#| output: false
common_col_green_final_names <- intersect(names(scopus_green_final), names(wos_green_final)) #Find common column names
scopus_wos_green_final <- merge(scopus_green_final, wos_green_final, by=common_col_green_final_names, all.x=TRUE) # Merge data by common column names to check if scopus missed any publications wos has.
```

```{r}
#| echo: false
#| output: false
common_col_green_accepted_names <- intersect(names(scopus_green_accepted), names(wos_green_accepted)) #Find common column names
scopus_wos_green_accepted <- merge(scopus_green_accepted, wos_green_accepted, by=common_col_green_accepted_names, all.x=TRUE) # Merge data by common column names to check if scopus missed any publications wos has.
```

```{r}
#| echo: false
#| output: false
common_col_not_green_names <- intersect(names(scopus_not_green), names(wos_not_green)) #Find common column names
scopus_wos_not_green <- merge(scopus_not_green, wos_not_green, by=common_col_not_green_names, all.x=TRUE) # Merge data by common column names to check if scopus missed any publications wos has.
```

```{r}
#| echo: false
#| output: false
all_oa_corr <- scopus_wos_all_oa %>% dplyr::filter(grepl("@northumbria",RP, ignore.case = TRUE))
all_oa_single_authors<- all_oa_corr %>% 
    mutate(AU = strsplit(as.character(AU), ";")) %>%  
    unnest(AU) #Individual authors

green_corr <- scopus_wos_green %>% dplyr::filter(grepl("@northumbria",RP, ignore.case = TRUE))
green_single_authors<- green_corr %>% 
    mutate(AU = strsplit(as.character(AU), ";")) %>%  
    unnest(AU) #Individual authors

green_final_corr <- scopus_wos_green_final %>% dplyr::filter(grepl("@northumbria",RP, ignore.case = TRUE))
green_final_single_authors<- green_final_corr %>% 
    mutate(AU = strsplit(as.character(AU), ";")) %>%  
    unnest(AU) #Individual authors

green_accepted_corr <- scopus_wos_green_accepted %>% dplyr::filter(grepl("@northumbria",RP, ignore.case = TRUE))
green_accepted_single_authors<- green_accepted_corr %>% 
    mutate(AU = strsplit(as.character(AU), ";")) %>%  
    unnest(AU) #Individual authors

not_green_corr <- scopus_wos_not_green %>% dplyr::filter(grepl("@northumbria",RP, ignore.case = TRUE))
not_green_single_authors<- not_green_corr %>% 
    mutate(AU = strsplit(as.character(AU), ";")) %>%  
    unnest(AU) #Individual authors
```

```{r}
#| echo: false
#| output: false
all_oa_single_authors$RP <- sub(';.*', "" , as.character(all_oa_single_authors$RP))
all_oa_single_authors$RP <- gsub(',',"", as.character(all_oa_single_authors$RP))
all_oa_single_authors$RP <- gsub('\\.',"", as.character(all_oa_single_authors$RP))
#Removing problem characters fo filtering to just corresponding authors.
rp_single_author_all_oa <- subset(all_oa_single_authors, AU == RP)

green_single_authors$RP <- sub(';.*', "" , as.character(green_single_authors$RP))
green_single_authors$RP <- gsub(',',"", as.character(green_single_authors$RP))
green_single_authors$RP <- gsub('\\.',"", as.character(green_single_authors$RP))
#Removing problem characters fo filtering to just corresponding authors.
rp_single_author_green <- subset(green_single_authors, AU == RP)

green_final_single_authors$RP <- sub(';.*', "" , as.character(green_final_single_authors$RP))
green_final_single_authors$RP <- gsub(',',"", as.character(green_final_single_authors$RP))
green_final_single_authors$RP <- gsub('\\.',"", as.character(green_final_single_authors$RP))
#Removing problem characters fo filtering to just corresponding authors.
rp_single_author_green_final <- subset(green_final_single_authors, AU == RP)

green_accepted_single_authors$RP <- sub(';.*', "" , as.character(green_accepted_single_authors$RP))
green_accepted_single_authors$RP <- gsub(',',"", as.character(green_accepted_single_authors$RP))
green_accepted_single_authors$RP <- gsub('\\.',"", as.character(green_accepted_single_authors$RP))
#Removing problem characters fo filtering to just corresponding authors.
rp_single_author_green_accepted <- subset(green_accepted_single_authors, AU == RP)

not_green_single_authors$RP <- sub(';.*', "" , as.character(not_green_single_authors$RP))
not_green_single_authors$RP <- gsub(',',"", as.character(not_green_single_authors$RP))
not_green_single_authors$RP <- gsub('\\.',"", as.character(not_green_single_authors$RP))
#Removing problem characters fo filtering to just corresponding authors.
rp_single_author_not_green <- subset(not_green_single_authors, AU == RP)
```

```{r}
#| echo: false
#| output: false
duplicates_green_green<-inner_join(scopus_wos_not_green, scopus_wos_green_final, scopus_wos_green_accepted, by='DI')

duplicates_not_green_green_final<-inner_join(scopus_wos_not_green, scopus_wos_green_final, scopus_wos_green, by='DI')

duplicates_not_green_green_acccepted<-inner_join(scopus_wos_not_green, scopus_wos_green_accepted, scopus_wos_green, by='DI')

duplicates_green_final_green_acccepted<-inner_join(scopus_green_final, scopus_wos_green_accepted, scopus_wos_green, by='DI')
```

```{r}
#| echo: false
#| output: false
corr_table_all_oa<-table(rp_single_author_all_oa$AU)
corr_table_all_oa_sorted <- corr_table_all_oa%>%                 
  as.data.frame() %>% 
  arrange(desc(Freq))

corr_table_green<-table(rp_single_author_green$AU)
corr_table_green_sorted <- corr_table_green%>%                 
  as.data.frame() %>% 
  arrange(desc(Freq))

corr_table_green_final<-table(rp_single_author_green_final$AU)
corr_table_green_final_sorted <- corr_table_green_final%>%                 
  as.data.frame() %>% 
  arrange(desc(Freq))

corr_table_green_accepted<-table(rp_single_author_green_accepted$AU)
corr_table_green_accepted_sorted <- corr_table_green_accepted%>%                 
  as.data.frame() %>% 
  arrange(desc(Freq))

corr_table_not_green<-table(rp_single_author_not_green$AU)
corr_table_not_green_sorted <- corr_table_not_green%>%                 
  as.data.frame() %>% 
  arrange(desc(Freq))

```

```{r}
#| echo: false
#| output: false
SO_table_all_oa<-table(scopus_wos_all_oa$SO)
SO_table_all_oa_sorted <- SO_table_all_oa%>%                 
  as.data.frame() %>% 
  arrange(desc(Freq))

SO_table_green<-table(scopus_wos_green$SO)
SO_table_green_sorted <- SO_table_green%>%                 
  as.data.frame() %>% 
  arrange(desc(Freq))

SO_table_green_final<-table(scopus_wos_green_final$SO)
SO_table_green_final_sorted <- SO_table_green_final%>%                 
  as.data.frame() %>% 
  arrange(desc(Freq))

SO_table_green_accepted<-table(scopus_wos_green_accepted$SO)
SO_table_green_accepted_sorted <- SO_table_green_accepted%>%                 
  as.data.frame() %>% 
  arrange(desc(Freq))

SO_table_not_green<-table(scopus_wos_not_green$SO)
SO_table_not_green_sorted <- SO_table_not_green%>%                 
  as.data.frame() %>% 
  arrange(desc(Freq))
```

# Bibliometrix

## Descriptive Statistics

Tables showing most productive authors, top manuscripts per citations, corresponding authors countries, single country publications, multiple country publications, most relevant sources, most relevant keywords.

### **All Open Access**

```{r}
result_all_oa <- biblioAnalysis(all_oa_corr, sep = ";")


options(width=100)
summary_result_all_oa  <- summary(object= result_all_oa, k = 25, pause = F)
```

### **Green**

```{r}
result_green <- biblioAnalysis(green_corr, sep = ";")


options(width=100)
summary_result_green  <- summary(object= result_green, k = 25, pause = F)
```

### **Green Final**

```{r}
result_green_final <- biblioAnalysis(green_final_corr, sep = ";")


options(width=100)
summary_result_green_final  <- summary(object= result_green_final, k = 25, pause = F)
```

### **Green Accepted**

```{r}
result_green_accepted <- biblioAnalysis(green_accepted_corr, sep = ";")


options(width=100)
summary_result_green_accepted  <- summary(object= result_green, k = 25, pause = F)
```

### **Not Green**

```{r}
result_not_green <- biblioAnalysis(not_green_corr, sep = ";")


options(width=100)
summary_result_not_green  <- summary(object= result_not_green, k = 25, pause = F)
```

## Plots

Plots with most productive authors, top manuscripts per citations, corresponding authors countries, single country publications, multiple country publications, most relevant sources, most relevant keywords.

Showing only most productive authors.

### **All Open Access**

```{r}
#| output: false
plot_result_all_oa <- plot(x = result_all_oa, k = 10, pause = F)
```

```{r}
plot_result_all_oa[["MostProdAuthors"]]
```

### **Green**

```{r}
#| output: false
plot_result_green<-plot(x = result_green, k = 10, pause = F)
```

```{r}
plot_result_green[["MostProdAuthors"]]
```

### **Green Final**

```{r}
#| output: false
plot_result_green_final<-plot(x = result_green_final, k = 10, pause = F)
```

```{r}
plot_result_green_final[["MostProdAuthors"]]
```

### **Green Accepted**

```{r}
#| output: false
plot_result_green_accepted<-plot(x = result_green_accepted, k = 10, pause = F)
```

```{r}
plot_result_green_accepted[["MostProdAuthors"]]
```

### **Not Green**

```{r}
#| output: false
plot_result_not_green<-plot(x = result_not_green, k = 10, pause = F)
```

```{r}
plot_result_not_green[["MostProdAuthors"]]
```

## Citedness

Details around amount of citations for each author.

```{r}
single_author_table_all_oa_cited<- rp_single_author_all_oa %>% select(c(AU, TI, TC, PY)) #Selected for single authors, publication title, amount of citations and publication year.
single_author_table_all_oa_cited <- subset(single_author_table_all_oa_cited, PY =='2022' )#Limit to 2022
single_author_table_all_oa_atleast_one_citation <- subset(single_author_table_all_oa_cited, TC >= 1 ) #Remove authors with no citations

single_author_table_green_cited<- rp_single_author_green %>% select(c(AU, TI, TC, PY)) #Selected for single authors, publication title, amount of citations and publication year.
single_author_table_green_cited <- subset(single_author_table_green_cited, PY =='2022' )#Limit to 2022
single_author_table_green_atleast_one_citation <- subset(single_author_table_green_cited, TC >= 1 ) #Remove authors with no citations

single_author_table_green_final_cited<- rp_single_author_green_final %>% select(c(AU, TI, TC, PY)) #Selected for single authors, publication title, amount of citations and publication year.
single_author_table_green_final_cited <- subset(single_author_table_green_final_cited, PY =='2022' )#Limit to 2022
single_author_table_green_final_atleast_one_citation <- subset(single_author_table_green_final_cited, TC >= 1 ) #Remove authors with no citations

single_author_table_green_accepted_cited<- rp_single_author_green_accepted %>% select(c(AU, TI, TC, PY)) #Selected for single authors, publication title, amount of citations and publication year.
single_author_table_green_accepted_cited <- subset(single_author_table_green_accepted_cited, PY =='2022' )#Limit to 2022
single_author_table_green_accepted_atleast_one_citation <- subset(single_author_table_green_accepted_cited, TC >= 1 ) #Remove authors with no citations

single_author_table_not_green_cited<- rp_single_author_not_green %>% select(c(AU, TI, TC, PY)) #Selected for single authors, publication title, amount of citations and publication year.
single_author_table_not_green_cited <- subset(single_author_table_not_green_cited, PY =='2022' )#Limit to 2022
single_author_table_not_green_atleast_one_citation <- subset(single_author_table_not_green_cited, TC >= 1 ) #Remove authors with no citations

```

## Publications with at least one citation

Proportion of publications that have at least one citation.

### **All Open Access**

```{r}
sum( ( single_author_table_all_oa_cited$TC >= 1 ) / length( single_author_table_all_oa_cited$TC ) )
```

### **Green**

```{r}
sum( ( single_author_table_green_cited$TC >= 1 ) / length( single_author_table_green_cited$TC ) )
```

### **Final Green**

```{r}
sum( ( single_author_table_green_final_cited$TC >= 1 ) / length( single_author_table_green_final_cited$TC ) )
```

### **Green Accepted**

```{r}
sum( ( single_author_table_green_accepted_cited$TC >= 1 ) / length( single_author_table_green_accepted_cited$TC ) )
```

### **Not Green**

```{r}
sum( ( single_author_table_not_green_cited$TC >= 1 ) / length( single_author_table_not_green_cited$TC ) )
```

## Comparisons between Open Access status

General linear model showing the comparisons between the open access status of author's publications and their citedness.

```{r}
single_author_table_all_oa_cited_status <- cbind(single_author_table_all_oa_cited, oa_status = "All Open Access")

single_author_table_green_cited_status <- cbind(single_author_table_green_cited, oa_status = "Green")

single_author_table_green_final_cited_status <- cbind(single_author_table_green_final_cited, oa_status = "Green Final")

single_author_table_green_accepted_cited_status <- cbind(single_author_table_green_accepted_cited, oa_status = "Green Accepted")

single_author_table_not_green_cited_status <- cbind(single_author_table_not_green_cited, oa_status = "Not")

full_oa_for_analysis <- rbind(single_author_table_green_cited_status, single_author_table_green_final_cited_status, single_author_table_green_accepted_cited_status, single_author_table_not_green_cited_status)

full_oa_for_analysis$cited <- ifelse(full_oa_for_analysis$TC>=1 & full_oa_for_analysis$TC>=1, 1, 0)

full_oa_for_analysis <- full_oa_for_analysis %>% 
  mutate(green_or_not = case_when(str_detect(oa_status, "Green|Green Final|Green Accepted" ) ~ "1",
                           str_detect(oa_status, "Not" ) ~ "0"))

model_all <- glm(cited ~ green_or_not ,data=full_oa_for_analysis, family=binomial)
summary(model_all)
```
