{"title":"Network Attributes and Visualisations","markdown":{"yaml":{"title":"Network Attributes and Visualisations","author":[{"name":"Thomas Pollet and Connor Malcolm","affiliations":[{"name":"Northumbria University"}]}],"date":"2022-01-30","date-modified":"`r format(Sys.time(), '%Y %B, %d')`","title-block-banner":true,"abstract":"Network Attributes, Visualisations, Hive Plots for Corresponding authors based upon Collaboration"},"headingText":"| echo: false","containsRefs":false,"markdown":"\n\n```{r}\n#| output: false\nlibrary(tidyverse)\nlibrary(yarrr)\nlibrary(wordcloud)\nlibrary(wordcloud2)\nlibrary(bibliometrix)\nlibrary(tidyverse)\nlibrary(igraph)\nlibrary(tidygraph)\nlibrary(ggraph)\nlibrary(EGAnet)\nlibrary(papaja)\nlibrary(janitor)\nlibrary(gtools)\nlibrary(data.table)\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(HiveR)\n```\n\n```{r}\n#| echo: false\n#| output: false\n\nscopus1000df <- convert2df(file = \"scopus2000alloa.bib\" , dbsource = \"scopus\", format = \"bibtex\")\nscopusRESTdf <- convert2df(file = \"scopusall30.bib\" , dbsource = \"scopus\", format = \"bibtex\")\nscopus_all_oa<- merge(scopusRESTdf, scopus1000df, all = TRUE) #Scopus has a 2000 limit for BibTex files so All Open Access needed to be downloaded into two .bib files and then merged to one\n\n\n```\n\n```{r}\n#| echo: false\n#| output: false\n\nfile <- \"scopusGreen.bib\"\n\nscopus_green <- convert2df(file = file , dbsource = \"scopus\", format = \"bibtex\")\n\n```\n\n```{r}\n#| echo: false\n#| output: false\n\nfile <- \"scopusGREENFINALOA.bib\"\n\nscopus_green_final <- convert2df(file = file , dbsource = \"scopus\", format = \"bibtex\")\n```\n\n```{r}\n#| echo: false\n#| output: false\n\nfile <- \"scopusGREENACCEPTEDOA.bib\"\n\nscopus_green_accepted <- convert2df(file = file , dbsource = \"scopus\", format = \"bibtex\")\n```\n\n```{r}\n#| echo: false\n#| output: false\n\nfile <- \"scopusNOTGREEN.bib\"\n\nscopus_not_green <- convert2df(file = file , dbsource = \"scopus\", format = \"bibtex\")\n```\n\n```{r}\n#| echo: false\n#| output: false\n \nwos1000df <- convert2df(file = \"wosALLOA1000.bib\" , dbsource = \"wos\", format = \"bibtex\")\nwosRESTdf <- convert2df(file = \"wosALLrest.bib\" , dbsource = \"wos\", format = \"bibtex\")\nwos_all_oa<- merge(wosRESTdf, wos1000df, all = TRUE)#Web of science has a 1000 limit for BibTex files so All Open Access needed to be downloaded into two .bib files and then merged to one\n```\n\n```{r}\n#| echo: false\n#| output: false\n\nfile <- \"wosAllGreen.bib\"\n\nwos_green <- convert2df(file = file , dbsource = \"wos\", format = \"bibtex\")\n```\n\n```{r}\n#| echo: false\n#| output: false\n\nfile <- \"wosNOTGREEN.bib\"\n\nwos_not_green <- convert2df(file = file , dbsource = \"wos\", format = \"bibtex\")\n```\n\n```{r}\n#| echo: false\n#| output: false\n\nfile <- \"wosFinal.bib\"\n\nwos_green_final <- convert2df(file = file , dbsource = \"wos\", format = \"bibtex\")\n```\n\n```{r}\n#| echo: false\n#| output: false\n\nwos1000Accepteddf <- convert2df(file = \"wosAcceptedOA1000.bib\" , dbsource = \"wos\", format = \"bibtex\")\nwosRESTAccepteddf <- convert2df(file = \"wosAcceptedrest.bib\" , dbsource = \"wos\", format = \"bibtex\")\nwos_green_accepted<- merge(wosRESTAccepteddf, wos1000Accepteddf, all = TRUE)#Web of science has a 1000 limit for BibTex files so All Open Access needed to be downloaded into two .bib files and then merged to one\n```\n\n```{r}\n#| echo: false\n#| output: false\ncommon_col_all_oa_names <- intersect(names(scopus_all_oa), names(wos_all_oa)) #Find common column names\nscopus_wos_all_oa <- merge(scopus_all_oa, wos_all_oa, by=common_col_all_oa_names, all.x=TRUE) # Merge data by common column names to check if scopus missed any publications wos has.\n```\n\n```{r}\n#| echo: false\n#| output: false\ncommon_col_green_names <- intersect(names(scopus_green), names(wos_green)) #Find common column names\nscopus_wos_green <- merge(scopus_green, wos_green, by=common_col_green_names, all.x=TRUE) # Merge data by common column names to check if scopus missed any publications wos has.\n```\n\n```{r}\n#| echo: false\n#| output: false\ncommon_col_green_final_names <- intersect(names(scopus_green_final), names(wos_green_final)) #Find common column names\nscopus_wos_green_final <- merge(scopus_green_final, wos_green_final, by=common_col_green_final_names, all.x=TRUE) # Merge data by common column names to check if scopus missed any publications wos has.\n```\n\n```{r}\n#| echo: false\n#| output: false\ncommon_col_green_accepted_names <- intersect(names(scopus_green_accepted), names(wos_green_accepted)) #Find common column names\nscopus_wos_green_accepted <- merge(scopus_green_accepted, wos_green_accepted, by=common_col_green_accepted_names, all.x=TRUE) # Merge data by common column names to check if scopus missed any publications wos has.\n```\n\n```{r}\n#| echo: false\n#| output: false\ncommon_col_not_green_names <- intersect(names(scopus_not_green), names(wos_not_green)) #Find common column names\nscopus_wos_not_green <- merge(scopus_not_green, wos_not_green, by=common_col_not_green_names, all.x=TRUE) # Merge data by common column names to check if scopus missed any publications wos has.\n```\n\n```{r}\n#| echo: false\n#| output: false\nall_oa_corr <- scopus_wos_all_oa %>% dplyr::filter(grepl(\"@northumbria\",RP, ignore.case = TRUE))\nall_oa_single_authors<- all_oa_corr %>% \n    mutate(AU = strsplit(as.character(AU), \";\")) %>%  \n    unnest(AU) #Individual authors\n\ngreen_corr <- scopus_wos_green %>% dplyr::filter(grepl(\"@northumbria\",RP, ignore.case = TRUE))\ngreen_single_authors<- green_corr %>% \n    mutate(AU = strsplit(as.character(AU), \";\")) %>%  \n    unnest(AU) #Individual authors\n\ngreen_final_corr <- scopus_wos_green_final %>% dplyr::filter(grepl(\"@northumbria\",RP, ignore.case = TRUE))\ngreen_final_single_authors<- green_final_corr %>% \n    mutate(AU = strsplit(as.character(AU), \";\")) %>%  \n    unnest(AU) #Individual authors\n\ngreen_accepted_corr <- scopus_wos_green_accepted %>% dplyr::filter(grepl(\"@northumbria\",RP, ignore.case = TRUE))\ngreen_accepted_single_authors<- green_accepted_corr %>% \n    mutate(AU = strsplit(as.character(AU), \";\")) %>%  \n    unnest(AU) #Individual authors\n\nnot_green_corr <- scopus_wos_not_green %>% dplyr::filter(grepl(\"@northumbria\",RP, ignore.case = TRUE))\nnot_green_single_authors<- not_green_corr %>% \n    mutate(AU = strsplit(as.character(AU), \";\")) %>%  \n    unnest(AU) #Individual authors\n```\n\n```{r}\n#| echo: false\n#| output: false\nall_oa_single_authors$RP <- sub(';.*', \"\" , as.character(all_oa_single_authors$RP))\nall_oa_single_authors$RP <- gsub(',',\"\", as.character(all_oa_single_authors$RP))\nall_oa_single_authors$RP <- gsub('\\\\.',\"\", as.character(all_oa_single_authors$RP))\n#Removing problem characters fo filtering to just corresponding authors.\nrp_single_author_all_oa <- subset(all_oa_single_authors, AU == RP)\n\ngreen_single_authors$RP <- sub(';.*', \"\" , as.character(green_single_authors$RP))\ngreen_single_authors$RP <- gsub(',',\"\", as.character(green_single_authors$RP))\ngreen_single_authors$RP <- gsub('\\\\.',\"\", as.character(green_single_authors$RP))\n#Removing problem characters fo filtering to just corresponding authors.\nrp_single_author_green <- subset(green_single_authors, AU == RP)\n\ngreen_final_single_authors$RP <- sub(';.*', \"\" , as.character(green_final_single_authors$RP))\ngreen_final_single_authors$RP <- gsub(',',\"\", as.character(green_final_single_authors$RP))\ngreen_final_single_authors$RP <- gsub('\\\\.',\"\", as.character(green_final_single_authors$RP))\n#Removing problem characters fo filtering to just corresponding authors.\nrp_single_author_green_final <- subset(green_final_single_authors, AU == RP)\n\ngreen_accepted_single_authors$RP <- sub(';.*', \"\" , as.character(green_accepted_single_authors$RP))\ngreen_accepted_single_authors$RP <- gsub(',',\"\", as.character(green_accepted_single_authors$RP))\ngreen_accepted_single_authors$RP <- gsub('\\\\.',\"\", as.character(green_accepted_single_authors$RP))\n#Removing problem characters fo filtering to just corresponding authors.\nrp_single_author_green_accepted <- subset(green_accepted_single_authors, AU == RP)\n\nnot_green_single_authors$RP <- sub(';.*', \"\" , as.character(not_green_single_authors$RP))\nnot_green_single_authors$RP <- gsub(',',\"\", as.character(not_green_single_authors$RP))\nnot_green_single_authors$RP <- gsub('\\\\.',\"\", as.character(not_green_single_authors$RP))\n#Removing problem characters fo filtering to just corresponding authors.\nrp_single_author_not_green <- subset(not_green_single_authors, AU == RP)\n```\n\n```{r}\n#| echo: false\n#| output: false\nduplicates_green_green<-inner_join(scopus_wos_not_green, scopus_wos_green_final, scopus_wos_green_accepted, by='DI')\n\nduplicates_not_green_green_final<-inner_join(scopus_wos_not_green, scopus_wos_green_final, scopus_wos_green, by='DI')\n\nduplicates_not_green_green_acccepted<-inner_join(scopus_wos_not_green, scopus_wos_green_accepted, scopus_wos_green, by='DI')\n\nduplicates_green_final_green_acccepted<-inner_join(scopus_green_final, scopus_wos_green_accepted, scopus_wos_green, by='DI')\n```\n\n```{r}\n#| echo: false\n#| output: false\ncorr_table_all_oa<-table(rp_single_author_all_oa$AU)\ncorr_table_all_oa_sorted <- corr_table_all_oa%>%                 \n  as.data.frame() %>% \n  arrange(desc(Freq))\n\ncorr_table_green<-table(rp_single_author_green$AU)\ncorr_table_green_sorted <- corr_table_green%>%                 \n  as.data.frame() %>% \n  arrange(desc(Freq))\n\ncorr_table_green_final<-table(rp_single_author_green_final$AU)\ncorr_table_green_final_sorted <- corr_table_green_final%>%                 \n  as.data.frame() %>% \n  arrange(desc(Freq))\n\ncorr_table_green_accepted<-table(rp_single_author_green_accepted$AU)\ncorr_table_green_accepted_sorted <- corr_table_green_accepted%>%                 \n  as.data.frame() %>% \n  arrange(desc(Freq))\n\ncorr_table_not_green<-table(rp_single_author_not_green$AU)\ncorr_table_not_green_sorted <- corr_table_not_green%>%                 \n  as.data.frame() %>% \n  arrange(desc(Freq))\n\n```\n\n```{r}\n#| echo: false\n#| output: false\nSO_table_all_oa<-table(scopus_wos_all_oa$SO)\nSO_table_all_oa_sorted <- SO_table_all_oa%>%                 \n  as.data.frame() %>% \n  arrange(desc(Freq))\n\nSO_table_green<-table(scopus_wos_green$SO)\nSO_table_green_sorted <- SO_table_green%>%                 \n  as.data.frame() %>% \n  arrange(desc(Freq))\n\nSO_table_green_final<-table(scopus_wos_green_final$SO)\nSO_table_green_final_sorted <- SO_table_green_final%>%                 \n  as.data.frame() %>% \n  arrange(desc(Freq))\n\nSO_table_green_accepted<-table(scopus_wos_green_accepted$SO)\nSO_table_green_accepted_sorted <- SO_table_green_accepted%>%                 \n  as.data.frame() %>% \n  arrange(desc(Freq))\n\nSO_table_not_green<-table(scopus_wos_not_green$SO)\nSO_table_not_green_sorted <- SO_table_not_green%>%                 \n  as.data.frame() %>% \n  arrange(desc(Freq))\n```\n\n```{r}\n#| echo: false\n#| output: false\nresult_all_oa <- biblioAnalysis(all_oa_corr, sep = \";\")\n\n\noptions(width=100)\nsummary_result_all_oa  <- summary(object= result_all_oa, k = 25, pause = F)\n```\n\n```{r}\n#| echo: false\n#| output: false\nresult_green <- biblioAnalysis(green_corr, sep = \";\")\n\n\noptions(width=100)\nsummary_result_green  <- summary(object= result_green, k = 25, pause = F)\n```\n\n```{r}\n#| echo: false\n#| output: false\nresult_green_final <- biblioAnalysis(green_final_corr, sep = \";\")\n\n\noptions(width=100)\nsummary_result_green_final  <- summary(object= result_green_final, k = 25, pause = F)\n```\n\n```{r}\n#| echo: false\n#| output: false\nresult_green_accepted <- biblioAnalysis(green_accepted_corr, sep = \";\")\n\n\noptions(width=100)\nsummary_result_green_accepted  <- summary(object= result_green, k = 25, pause = F)\n```\n\n```{r}\n#| echo: false\n#| output: false\nresult_not_green <- biblioAnalysis(not_green_corr, sep = \";\")\n\n\noptions(width=100)\nsummary_result_not_green  <- summary(object= result_not_green, k = 25, pause = F)\n```\n\n```{r}\n#| echo: false\n#| output: false\nsingle_author_table_all_oa_cited<- rp_single_author_all_oa %>% select(c(AU, TI, TC, PY)) #Selected for single authors, publication title, amount of citations and publication year.\nsingle_author_table_all_oa_cited <- subset(single_author_table_all_oa_cited, PY =='2022' )#Limit to 2022\nsingle_author_table_all_oa_atleast_one_citation <- subset(single_author_table_all_oa_cited, TC >= 1 ) #Remove authors with no citations\n\nsingle_author_table_green_cited<- rp_single_author_green %>% select(c(AU, TI, TC, PY)) #Selected for single authors, publication title, amount of citations and publication year.\nsingle_author_table_green_cited <- subset(single_author_table_green_cited, PY =='2022' )#Limit to 2022\nsingle_author_table_green_atleast_one_citation <- subset(single_author_table_green_cited, TC >= 1 ) #Remove authors with no citations\n\nsingle_author_table_green_final_cited<- rp_single_author_green_final %>% select(c(AU, TI, TC, PY)) #Selected for single authors, publication title, amount of citations and publication year.\nsingle_author_table_green_final_cited <- subset(single_author_table_green_final_cited, PY =='2022' )#Limit to 2022\nsingle_author_table_green_final_atleast_one_citation <- subset(single_author_table_green_final_cited, TC >= 1 ) #Remove authors with no citations\n\nsingle_author_table_green_accepted_cited<- rp_single_author_green_accepted %>% select(c(AU, TI, TC, PY)) #Selected for single authors, publication title, amount of citations and publication year.\nsingle_author_table_green_accepted_cited <- subset(single_author_table_green_accepted_cited, PY =='2022' )#Limit to 2022\nsingle_author_table_green_accepted_atleast_one_citation <- subset(single_author_table_green_accepted_cited, TC >= 1 ) #Remove authors with no citations\n\nsingle_author_table_not_green_cited<- rp_single_author_not_green %>% select(c(AU, TI, TC, PY)) #Selected for single authors, publication title, amount of citations and publication year.\nsingle_author_table_not_green_cited <- subset(single_author_table_not_green_cited, PY =='2022' )#Limit to 2022\nsingle_author_table_not_green_atleast_one_citation <- subset(single_author_table_not_green_cited, TC >= 1 ) #Remove authors with no citations\n\n```\n\n```{r}\n#| echo: false\n#| output: false\nsingle_author_table_all_oa_cited_status <- cbind(single_author_table_all_oa_cited, oa_status = \"All Open Access\")\n\nsingle_author_table_green_cited_status <- cbind(single_author_table_green_cited, oa_status = \"Green\")\n\nsingle_author_table_green_final_cited_status <- cbind(single_author_table_green_final_cited, oa_status = \"Green Final\")\n\nsingle_author_table_green_accepted_cited_status <- cbind(single_author_table_green_accepted_cited, oa_status = \"Green Accepted\")\n\nsingle_author_table_not_green_cited_status <- cbind(single_author_table_not_green_cited, oa_status = \"Not\")\n\nfull_oa_for_analysis <- rbind(single_author_table_green_cited_status, single_author_table_green_final_cited_status, single_author_table_green_accepted_cited_status, single_author_table_not_green_cited_status)\n\nfull_oa_for_analysis$cited <- ifelse(full_oa_for_analysis$TC>=1 & full_oa_for_analysis$TC>=1, 1, 0)\n\nfull_oa_for_analysis <- full_oa_for_analysis %>% \n  mutate(green_or_not = case_when(str_detect(oa_status, \"Green|Green Final|Green Accepted\" ) ~ \"1\",\n                           str_detect(oa_status, \"Not\" ) ~ \"0\"))\n\nmodel_all <- glm(cited ~ green_or_not ,data=full_oa_for_analysis, family=binomial)\nsummary(model_all)\n```\n\n# Author Collaboration for Corresponding Authors\n\nSummary statistics : Size, Density, Transitivity, Diameter (length of shortest path between nodes in a network), Degree distribution, Degree centralization, Closeness centralization, Eigenvector centralization, Betweeness centralization, Average path length.\n\n## **All Open Access**\n\n#### Summary Statistics\n\n```{r}\n\nall_oa_corr <- all_oa_corr[!duplicated(all_oa_corr$DI),]\nall_oa_corr$SR <- NULL\nall_oa_corr$SR_FULL <-NULL ##Seemed to hold problem duplicates I couldn't get rid of without removing publictaions so I just dropped the columns for all_oa.Not useful anyway.\nnet_matrix_all_oa <- biblioNetwork(all_oa_corr, analysis = \"collaboration\", network = \"authors\", sep = \";\")\nnet_stat_all_oa <- networkStat(net_matrix_all_oa)\n\nsummary(net_stat_all_oa, k=10)\n```\n\n#### Page Rank\n\n```{r}\nnet_all_oa_all<- networkStat(net_matrix_all_oa, stat = \"all\", type= \"all\") #Calculates many interesting things (including pagerank.)\nnet_all_oa_interesting <- as.data.frame(net_all_oa_all[[\"vertex\"]])\nall_oa_page_rank <- net_all_oa_interesting[with(net_all_oa_interesting,order(-vertexPageRank)),]\n\nall_oa_page_rank <- all_oa_page_rank[1:25,]\nall_oa_page_rank_top_25 <- all_oa_page_rank %>% select(c(vertexID, vertexPageRank))\n\nall_oa_page_rank_top_25\n```\n\n#### Network Plot\n\n(Need to figure out how to have large networks that aren't just hairballs)\n\n```{r}\nnet_all_oa <- networkPlot(net_matrix_all_oa, n = 150, Title = \"Collaboration Network\", type = \"fruchterman\", size=T, remove.multiple=FALSE, labelsize=0.7,edgesize = .5)\n\n```\n\n## **Green**\n\n#### Summary Statistics\n\n```{r}\nnet_matrix_green <- biblioNetwork(green_corr, analysis = \"collaboration\", network = \"authors\", sep = \";\")\nnet_stat_green <- networkStat(net_matrix_green)\nsummary(net_stat_green, k=10)\n\n```\n\n#### Page Rank\n\n```{r}\nnet_green_all<- networkStat(net_matrix_green, stat = \"all\", type= \"all\") #Calculates many interesting things (including pagerank.)\nnet_green_interesting <- as.data.frame(net_green_all[[\"vertex\"]])\ngreen_page_rank <- net_green_interesting[with(net_green_interesting,order(-vertexPageRank)),]\n\ngreen_page_rank <- green_page_rank[1:25,]\ngreen_page_rank_top_25 <- green_page_rank %>% select(c(vertexID, vertexPageRank))\n\ngreen_page_rank_top_25\n```\n\n#### Network Plot\n\n```{r}\nnet_green <- networkPlot(net_matrix_green, n = 150, Title = \"Collaboration Network\", type = \"fruchterman\", size=T, remove.multiple=FALSE, labelsize=0.7,edgesize = 5)\n```\n\n## **Green Final**\n\n#### Summary Statistics\n\n```{r}\nnet_matrix_green_final <- biblioNetwork(green_final_corr, analysis = \"collaboration\", network = \"authors\", sep = \";\")\nnet_stat_green_final <- networkStat(net_matrix_green_final)\n\nsummary(net_stat_green_final, k=10)\n```\n\n#### Page Rank\n\n```{r}\nnet_green_final_all<- networkStat(net_matrix_green_final, stat = \"all\", type= \"all\") #Calculates many interesting things (including pagerank.)\nnet_green_final_interesting <- as.data.frame(net_green_final_all[[\"vertex\"]])\ngreen_final_page_rank <- net_green_final_interesting[with(net_green_final_interesting,order(-vertexPageRank)),]\n\ngreen_final_page_rank <- green_final_page_rank[1:25,]\ngreen_final_page_rank_top_25 <- green_final_page_rank %>% select(c(vertexID, vertexPageRank))\n\ngreen_final_page_rank_top_25\n```\n\n#### Network Plot\n\n```{r}\nnet_green_final <- networkPlot(net_matrix_green_final, n = 150, Title = \"Collaboration Network\", type = \"fruchterman\", size=T, remove.multiple=FALSE, labelsize=0.7,edgesize = 1)\n```\n\n## **Green Accepted**\n\n### Summary Statistics\n\n```{r}\nnet_matrix_green_accepted <- biblioNetwork(green_accepted_corr, analysis = \"collaboration\", network = \"authors\", sep = \";\")\nnet_stat_green_accepted <- networkStat(net_matrix_green_accepted)\n\nsummary(net_stat_green_accepted, k=10)\n```\n\n### Page Rank\n\n```{r}\nnet_green_accepted_all<- networkStat(net_matrix_green_accepted, stat = \"all\", type= \"all\") #Calculates many interesting things (including pagerank.)\nnet_green_accepted_interesting <- as.data.frame(net_green_accepted_all[[\"vertex\"]])\ngreen_accepted_page_rank <- net_green_accepted_interesting[with(net_green_accepted_interesting,order(-vertexPageRank)),]\n\ngreen_accepted_page_rank <- green_accepted_page_rank[1:25,]\ngreen_accepted_page_rank_top_25 <- green_accepted_page_rank %>% select(c(vertexID, vertexPageRank))\n\ngreen_accepted_page_rank_top_25\n```\n\n### Network Plot\n\n```{r}\nnet_green_accepted <- networkPlot(net_matrix_green_accepted, n = 150, Title = \"Collaboration Network\", type = \"fruchterman\", size=T, remove.multiple=FALSE, labelsize=0.7,edgesize = 5)\n```\n\n## **Not Green**\n\n#### Summary Statistics\n\n```{r}\nnet_matrix_not_green<- biblioNetwork(not_green_corr, analysis = \"collaboration\", network = \"authors\", sep = \";\")\nnet_stat_not_green <- networkStat(net_matrix_not_green)\n\nsummary(net_stat_not_green, k=10)\n```\n\n#### Page Rank\n\n```{r}\nnet_not_green_all<- networkStat(net_matrix_not_green, stat = \"all\", type= \"all\") #Calculates many interesting things (including pagerank.)\nnet_not_green_interesting <- as.data.frame(net_not_green_all[[\"vertex\"]])\nnot_green_page_rank <- net_not_green_interesting[with(net_not_green_interesting,order(-vertexPageRank)),]\n\nnot_green_page_rank <- not_green_page_rank[1:25,]\nnot_green_page_rank_top_25 <- not_green_page_rank %>% select(c(vertexID, vertexPageRank))\n\nnot_green_page_rank_top_25\n```\n\n#### Network Plot\n\n```{r}\nnet_not_green <- networkPlot(net_matrix_not_green, n = 150, Title = \"Collaboration Network\", type = \"fruchterman\", size=T, remove.multiple=FALSE, labelsize=.7,edgesize = 5)\n```\n\n### Alternate Network Visualizations\n\n```{r}\nall_oa_graph <- igraph::graph.adjacency(net_matrix_all_oa                                                                             \n                                   , mode=\"undirected\"                                                                   \n                                   , weighted=TRUE) \n```\n\n```{r}\nclusterlouvain <- cluster_louvain(all_oa_graph)\nclusterlouvain\n```\n\n```{r}\nplot(all_oa_graph, vertex.color=rainbow(7, alpha=0.6)[clusterlouvain$membership])\n```\n\n```{r}\n\nstr(clusterlouvain)\nfull_cluster<- clusterlouvain[1:length(clusterlouvain) ]\ntop_ten_cluster <- full_cluster[1:10]\n\nsink(\"cluster_louvain.txt\")\nfull_cluster\nsink()\n\nsink(\"top_ten_cluster.txt\")\ntop_ten_cluster\nsink()\n\n\n\n```\n\nLink for Text files including First 10 (top_ten_cluster.txt) and a full text file for the cluster louvain (cluster_louvain.txt)\n\n[Cluster_Louvain](https://github.com/Connmal/Bibliometrix_Northumbria/blob/main/cluster_louvain.txt)\n\n[Top_Ten_Cluster](https://github.com/Connmal/Bibliometrix_Northumbria/blob/main/top_ten_cluster.txt)\n\n## Hive Plots\n\nTaking igraphs from the bilbionetwork object.\n\n```{r}\nhive_green <- net_green[[\"graph\"]]\ngreen_edge <- as_edgelist(hive_green)\ngreen_edge <- cbind(green_edge, oa_status = \"Green\")\ngreen_edge <- as.data.frame(green_edge)\nnames(green_edge)[names(green_edge) == \"V1\"] <- \"From\"\nnames(green_edge)[names(green_edge) == \"V2\"] <- \"To\"\n\nhive_green_accpeted <- net_green_accepted[[\"graph\"]]\ngreen_accepted_edge <- as_edgelist(hive_green_accpeted)\ngreen_accepted_edge <- cbind(green_accepted_edge, oa_status = \"Green Accepted\")\ngreen_accepted_edge <- as.data.frame(green_accepted_edge)\nnames(green_accepted_edge)[names(green_accepted_edge) == \"V1\"] <- \"From\"\nnames(green_accepted_edge)[names(green_accepted_edge) == \"V2\"] <- \"To\"\n\nhive_green_final <- net_green_final[[\"graph\"]]\ngreen_final_edge <- as_edgelist(hive_green_final)\ngreen_final_edge <- cbind(green_final_edge, oa_status = \"Green Final\")\ngreen_final_edge <- as.data.frame(green_final_edge)\nnames(green_final_edge)[names(green_final_edge) == \"V1\"] <- \"From\"\nnames(green_final_edge)[names(green_final_edge) == \"V2\"] <- \"To\"\n\nhive_not_green <- net_not_green[[\"graph\"]]\nnot_green_edge <- as_edgelist(hive_not_green)\nnot_green_edge <- cbind(not_green_edge, oa_status = \"Not Green\")\nnot_green_edge <- as.data.frame(not_green_edge)\nnames(not_green_edge)[names(not_green_edge) == \"V1\"] <- \"From\"\nnames(not_green_edge)[names(not_green_edge) == \"V2\"] <- \"To\"\n\nfull_hive <- rbind(green_edge, green_accepted_edge, green_final_edge, not_green_edge)\n\n```\n\nThe Hive plot below shows the collaborations between authors in terms of collaboration, differentiated by their open access.\n\nThe large main hive plot lines are where the nodes (authors) are situated based on three categories. Having **few** collaborations (less than 5) having **medium** collaborations (between 5 and 15) and having **many** collaborations (more than 15) The curved lines signify and edge (collaboration/link between authors).\n\n```{r}\ngraph <- graph_from_data_frame(full_hive)\nV(graph)$Collaboration <- degree(graph, mode = 'in')\n\n\nV(graph)$Collaboration <- factor(ifelse(V(graph)$Collaboration < 5, 'few', \n                                         ifelse(V(graph)$Collaboration >= 15, 'many', 'medium')), \n                                  levels = c('few', 'medium', 'many'))\n\n\n\n# Create the hive plot\nggraph(graph, 'hive', axis = Collaboration, sort.by = 'degree') + \n  geom_edge_hive(aes(colour = oa_status)) +\n  scale_color_manual(values = c(\"#16e01a\", \"#69d9db\", \"#9f4fe0\",\"#06000a\"), name = \"Open Access Status\") +\n   geom_axis_hive(aes(colour = Collaboration), size = 4, label = FALSE) + \n  scale_color_manual(values = c(\"#06000a\", \"#4149d9\", \"#fce803\"),\n                     labels = c('few', 'medium', 'many')) +\n  coord_fixed()\n\n\n\n```\n\n### Faceted Hive Plots\n\nHive plots separated by open access for clearer visualization.\n\n```{r}\nggraph(graph, 'hive', axis = Collaboration, sort.by = 'degree') + \n  geom_edge_hive(aes(colour = oa_status)) + \n  geom_axis_hive(aes(colour = Collaboration), size = 3, label = FALSE) + \n  scale_color_manual(values = c(\"#06000a\", \"#4149d9\", \"#fce803\"),\n                     labels = c('few', 'medium', 'many')) +\n  coord_fixed() +\n  facet_edges(~oa_status)\n\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"Network Attributes and Visualisations.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","editor":"visual","theme":"cyborg","title":"Network Attributes and Visualisations","author":[{"name":"Thomas Pollet and Connor Malcolm","affiliations":[{"name":"Northumbria University"}]}],"date":"2022-01-30","date-modified":"`r format(Sys.time(), '%Y %B, %d')`","title-block-banner":true,"abstract":"Network Attributes, Visualisations, Hive Plots for Corresponding authors based upon Collaboration"},"extensions":{"book":{"multiFile":true}}}}}